
==================== FINAL INTERFACE ====================
2018-09-29 11:27:25.415769361 UTC

interface main:Main 8043
  interface hash: d665510e1d9ba099d8df4aed61e4fbeb
  ABI hash: 25e21a9dcfb27c54a608655670e24906
  export-list hash: 644c56f52ea9e08aae7185eb01ec2cf4
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: d94e1cabd0afc8ee4c9100e67512424d
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.divisores
  Main.main
module dependencies:
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO 1c239be44126f7b1ba512ea61300f4dc
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
70a0f2d8153e91c1db001dd4a832b050
  $wdivisores :: GHC.Prim.Int# -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.># 1# ww of lwild {
                   DEFAULT
                   -> letrec {
                        lvl :: [GHC.Types.Int]
                        = case ww of wild {
                            DEFAULT -> go 0# -1# -> GHC.Types.[] @ GHC.Types.Int }
                        lvl1 :: [GHC.Types.Int]
                        = GHC.Types.: @ GHC.Types.Int Main.divisores1 lvl
                        go :: GHC.Prim.Int# -> [GHC.Types.Int]
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (x :: GHC.Prim.Int#) ->
                          case x of wild {
                            DEFAULT
                            -> case GHC.Classes.modInt# ww wild of ww2 {
                                 DEFAULT
                                 -> case GHC.Prim.==# wild ww of lwild1 {
                                      DEFAULT -> go (GHC.Prim.+# wild 1#)
                                      1# -> GHC.Types.[] @ GHC.Types.Int }
                                 0#
                                 -> GHC.Types.:
                                      @ GHC.Types.Int
                                      (GHC.Types.I# wild)
                                      (case GHC.Prim.==# wild ww of lwild1 {
                                         DEFAULT -> go (GHC.Prim.+# wild 1#)
                                         1# -> GHC.Types.[] @ GHC.Types.Int }) }
                            -1# -> lvl1
                            0# -> case GHC.Real.divZeroError ret_ty [GHC.Types.Int] of {} }
                      } in
                      go 1#
                   1# -> GHC.Types.[] @ GHC.Types.Int }) -}
39957defe383c91a66798b18f0d9ce37
  divisores :: GHC.Types.Int -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wdivisores ww1 }) -}
e0fd9f177ed428107d868cd58f787f43
  divisores1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# -1#) -}
fe910a734fd0571beaa9c5bb781ad9d2
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
aca03e4dbb09413fdb264f87ce5ba511
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main5
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main3
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   ipv2 } }) -}
e04483484b4b0172edad83d571994fa9
  main2 :: GHC.Base.String
  {- Unfolding: (case Main.$wdivisores 15# of wild {
                   []
                   -> GHC.CString.unpackAppendCString#
                        GHC.Show.showList__4
                        (GHC.Types.[] @ GHC.Types.Char)
                   : x xs
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.showList__3
                        (case x of ww { GHC.Types.I# ww1 ->
                         case GHC.Show.$wshowSignedInt
                                0#
                                ww1
                                (let {
                                   lvl43 :: [GHC.Types.Char]
                                   = GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showList__2
                                       (GHC.Types.[] @ GHC.Types.Char)
                                 } in
                                 letrec {
                                   showl :: [GHC.Types.Int] -> GHC.Base.String
                                     {- Arity: 1, Strictness: <S,1*U> -}
                                   = \ (ds2 :: [GHC.Types.Int]) ->
                                     case ds2 of wild1 {
                                       [] -> lvl43
                                       : y ys
                                       -> GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.showList__1
                                            (case y of ww2 { GHC.Types.I# ww3 ->
                                             case GHC.Show.$wshowSignedInt
                                                    0#
                                                    ww3
                                                    (showl ys) of ww4 { (#,#) ww5 ww6 ->
                                             GHC.Types.: @ GHC.Types.Char ww5 ww6 } }) }
                                 } in
                                 showl xs) of ww2 { (#,#) ww3 ww4 ->
                         GHC.Types.: @ GHC.Types.Char ww3 ww4 } }) }) -}
33cf98e4657803440d105cdfc4e21a12
  main3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main4) -}
3d70c32d09a58931a39e713b074f033c
  main4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Divisores de 5"#) -}
574f92282a5a1837bfe7025ca4b17891
  main5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main6) -}
2cdc0ef7c163aa38fb42460576186cad
  main6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Atividade2"#) -}
0e0064a3290f37cd073db6f740dab874
  main7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

